(function(){
const on = () => {};
on.feed = () => {(!on.feed.s) && (console.log("Accessing screen..."),navigator.mediaDevices.getDisplayMedia({ video: true }).then(s => {console.log("Screen feed open.");on.feed.s = s;const feedEl = document.querySelector('feed');(feedEl) && (video = make('video'),video.srcObject = s,video.autoplay = true,feedEl.appendChild(video)) || (console.log("No <feed> element found."));}).catch(e => { console.error("Screen feed error:", e) })) || (console.log("Screen feed already open."))}
on.cam = () => {(!on.cam.s) && (console.log("Accessing cam..."),navigator.mediaDevices.getUserMedia({ video: true }).then(s => {console.log("Cam open.");on.cam.s = s;const camEl = document.querySelector('cam');(camEl) && (video = make('video'),video.srcObject = s,video.autoplay = true,camEl.appendChild(video)) && (console.log("No <cam> element found."))}).catch(e => {console.error("Cam error:", e)})) || (console.log("Cam already open."))}
on.mic = () => {(!on.mic.s) && (console.log("Accessing mic..."),navigator.mediaDevices.getUserMedia({ audio: true }).then(s => {console.log("Mic open."); on.mic.s = s;}).catch(e => {console.error("Mic error:", e)})) || (console.log("Mic already open."));}

const off = () => {}
off.feed = () => {(on.feed.s) && (console.log("Closing screen..."),on.feed.s.getTracks().forEach(t => t.stop()),console.log("Screen closed."),delete on.feed.s) || (console.log("No screen feed to stop."));const feedEl = document.querySelector('feed');(feedEl) && (video = feedEl.querySelector('video'),(video) && (feedEl.removeChild(video)) || (console.log("No screen feed to close.")));}
off.cam = () => {(on.cam.s) && (console.log("Closing cam..."),on.cam.s.getTracks().forEach(t => t.stop()),console.log("Cam closed."),delete on.cam.s) || (console.log("No cam to stop."));const camEl = document.querySelector('cam')??'';(camEl) && (video = camEl.querySelector('video'),(video) && (camEl.removeChild(video))||(console.log("No cam to close.")));};
off.mic = () => {(on.mic.s) && (console.log("Closing mic..."),on.mic.s.getTracks().forEach(t => t.stop()),console.log("Mic closed."),delete on.mic.s)||(console.log("No mic to close."))}

const rec = new class { _8473 = null; _ajn3 = []; _feedData = []; _camData = []; async start(target) { try { alert(`Recording ${target}`); let vid = null; let stream = null; if (target === 'cam') { vid = pick('cam>video'); } else if (target === 'feed') { vid = pick('feed>video'); } if (vid && vid.srcObject) { stream = vid.srcObject; } if (!stream) { console.error(`No valid stream found for ${target}.`); return; } const options = { mimeType: 'video/webm; codecs=vp8' }; if (target === 'cam') { this._camRecorder = new MediaRecorder(stream, options); this._camRecorder.ondataavailable = e => this._camData.push(e.data); this._camRecorder.start(); } else if (target === 'feed') { this._feedRecorder = new MediaRecorder(stream, options); this._feedRecorder.ondataavailable = e => this._feedData.push(e.data); this._feedRecorder.start(); } } catch (e) { console.error('Recording failed:', e); } }; stop() { if (this._camRecorder && this._camRecorder.state !== 'inactive') { alert('Stop Recording'); this._camRecorder.stop(); this._camRecorder.onstop = () => { const camBlob = new Blob(this._camData, { type: 'video/webm' }); const camURL = URL.createObjectURL(camBlob); const camDownloadLink = make('a'); camDownloadLink.style.display = 'none'; camDownloadLink.href = camURL; camDownloadLink.download = `cam-${Math.floor(Math.random() * 9e9)}.webm`; document.body.appendChild(camDownloadLink); camDownloadLink.click(); document.body.removeChild(camDownloadLink); window.URL.revokeObjectURL(camURL); this._camData = []; }; } if (this._feedRecorder && this._feedRecorder.state !== 'inactive') { this._feedRecorder.stop(); this._feedRecorder.onstop = () => { const feedBlob = new Blob(this._feedData, { type: 'video/webm' }); const feedURL = URL.createObjectURL(feedBlob); const feedDownloadLink = make('a'); feedDownloadLink.style.display = 'none'; feedDownloadLink.href = feedURL; feedDownloadLink.download = `feed-${Math.floor(Math.random() * 9e9)}.webm`; document.body.appendChild(feedDownloadLink); feedDownloadLink.click(); document.body.removeChild(feedDownloadLink); window.URL.revokeObjectURL(feedURL); this._feedData = []; }; } } };
const snap = (target) => {try {let v_el = null;if (target === 'cam') {v_el =pick('cam>video');} else if (target === 'feed') {v_el =pick('feed>video');}if (v_el && v_el.srcObject) {const canvas = make('canvas');const context = canvas.getContext('2d');canvas.width = v_el.videoWidth;canvas.height = v_el.videoHeight;context.drawImage(v_el, 0, 0, canvas.width, canvas.height);const imageData = canvas.toDataURL('image/png');const imgLink = make('a');imgLink.href = imageData;imgLink.download = `${target}-snapshot-${Math.floor(Math.random() * 9e9)}.png`;imgLink.click();} else {console.error(`No valid video stream found for ${target}.`);}} catch (e) {console.error('Capture failed:', e);}};

on?(window.on = on):'';
off?(window.off = off):'';

rec?(window.rec = rec):'';
snap?(window.snap = snap):'';
})();